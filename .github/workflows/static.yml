name: Check and Print Condition

on:
  pull_request:
    types: [closed]   # Trigger when a PR is closed (merged or not)
    branches:
      - main          # Only for PRs targeting the main branch

jobs:
  check-branch:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to ensure branch deletion works

      - name: Set up Node.js (required for GitHub API requests)
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Check if the pull request was merged
        run: |
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "Pull request has been merged into main"
            echo "MERGED_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          else
            echo "Pull request was not merged."
            exit 1
          fi

      - name: Get the merged branch name
        if: ${{ env.MERGED_BRANCH }}
        run: echo "BRANCH_TEST=${{ env.MERGED_BRANCH }}" >> $GITHUB_ENV

      - name: List all branches in other repositories and check if merged into main
        if: ${{ env.MERGED_BRANCH }}
        id: list_branches
        run: |
          ORG_NAME="RandomOrganizationTest"
          BRANCH_TEST="${{ env.MERGED_BRANCH }}"
          BASE_BRANCH="main"
          TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          # Get the list of all repositories in the organization
          repos=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/orgs/$ORG_NAME/repos?per_page=100" | jq -r '.[].name')

          branch_merged=true

          # Loop through each repository
          for repo in $repos; do
            echo "Checking repository: $repo"

            # Compare the base (main) and head (branch to check) branches for each repo
            response=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/$ORG_NAME/$repo/compare/$BASE_BRANCH...$BRANCH_TEST" | jq -r '.status')

            if [[ "$response" == "identical" || "$response" == "behind" ]]; then
              echo "Branch $BRANCH_TEST has already been merged into $BASE_BRANCH in repository $repo"
            else
              echo "Branch $BRANCH_TEST is not merged into $BASE_BRANCH in repository $repo"
              branch_merged=false
            fi
          done

          # Set the result for branch merged across all repositories
          if [[ "$branch_merged" == true ]]; then
            echo "BRANCH_MERGED=true" >> $GITHUB_ENV
          else
            echo "BRANCH_MERGED=false" >> $GITHUB_ENV
          fi

      - name: Print "test" if branch does not exist in other repositories
        if: ${{ env.BRANCH_EXISTS_IN_OTHER_REPO == 'false' }}
        run: echo "test"
